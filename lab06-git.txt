Git Intro 2 Activity

==================


A. Form teams

-------------


Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, 
Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 
with permission of your TA.



Make a repo on GitHub.



Complete the exercises below, and fill in your answers in the spaces provided below each 
question.

Once you have completed all the exercises and filled in this file with your answers, 

add this file to your working directory (which you will create in section G) and push it to 
your team repo.

This file is the deliverable for this lab, so make sure you do not forget to push it at 
the end!



1.  List your team members below.

    

Matt Collins
Evie Boyd
Jerome Troy
    



D. Getting help

---------------


Run the following commands.

    

git help
    
git help -ag
    
git help init



1.  What does `git help` do?

    

Brings up common git commands used in various situations.  Also gives other help commands.
It's like a directory of all the help stuff.



2.  What does `-ag` cause `git help` to do?

    

Gives list of all commands available to you.  Also tells you common git guides.


G. Basic commands

-----------------



Open the terminal. Navigate to your team’s repository directory.



Create a directory inside of your team repository which will act as your submission 
directory for this lab.

The directory should be named according to the last names of your team members following 
the format below.

    

<member1LastName>_<member2LastName>_Lab6



Use a plain text editor to create `names.txt` inside the directory you just created.

Put the names of your team in the file. Save and exit.



Run `git status` before and after each of these commands.

    

git add names.txt
    
git commit –m “Add our names.”
    
git log



1.  What kind of information does `git status` report?

    

Tells you what branch you are on, if you are up to date with the branch, and what files 
have and have not been staged.



2.  What does `git add names.txt` do?

    

Stages the changes made to 'names.txt'.


3.  What does `git commit -m "Add our names."` do?

    

It puts the local branch one commit ahead of the remote branch with the commit message
"Add our names".



Use a plain text editor to create the following files:



-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real 
information here)



-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    

git add .
    
git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   
message, save and quit (press esc and then type :wq).
    
git log



4.  What does `git add .` do? What do you think `.` means?

 

The '.' stages all changes to files.








5.  What does `git commit` (without -m) do?

    

It commits and opens the vim editor to type the commit message.  Your local branch
is put ahead of the remote branch.


6.  If you want to write a more detailed commit message (which is
    good practice) 
what command would you use?

    

You should use 'git commit'



7.  What does `git log do`?

   

It shows the time and date of all the git actions done for the repository.




H. Stage/Cache/Index

--------------------


Do the following:


-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.



-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.



-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team 
member).



Run the following commands:

    

git add names.txt
    
git status



1.  Below write each file name under the state that its changes are
    currently in. 
Compose a definition for each state.

    

**Staged**

    



names.txt    

**Unstaged**

    

movies.txt    

**Untracked**

    

foods.txt



1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    

Only 'names.txt' will be commited.



2.  What command do you run to stage changes?

    

git add


3.  What command do you run to unstage changes?

    

git reset



Run the following commands:

    

git diff
    
git diff --cached



1.  What does `git diff` display?

    

Shows the differences for unstaged changes.



2.  What does `git diff --cached` display?

    

Shows the differences for all the staged changes.


3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    
and stage the changes to `movies.txt`. Write them here. 
Execute your commands and
    confirm they worked.

    

git reset names.txt
git add movies.txt



4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`.
 What do you observe? Explain what you think is
    going on.

    

movies.txt now appears twice.  It is because the changes are not being tracked.


5.  Delete `names.txt`. Then run `git status`. What do you observe?
    
Explain what you think is going on.

    

The file was deleted and needs to be staged. It was expecting to find 'names.txt' but it 
couldn't.


6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    

It says 'movies.txt' was deleted and 'last-movies.txt' was added. 



7.  Formulate a sequence of commands to stage all changes including the
    untracked file 
and commit (with any reasonable message you like).
    Execute them.

    

git add --all
git commit -m "updated branch"



8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. 
What does it hold?

    

It holds tracked changes.



9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    

It simplifies the amount of times we need to commit, allowing us to commit all 

changes we want to at once.


I. Undo

-------



Run the following commands:

    

git log
    
git status
    
git reset --soft "HEAD^"
    
git log
    
git status



1.  What does `git reset --soft ``"HEAD^" `do?

    

It sent us back one commit, but leave changes in those files to be commited.



Run the following commands:

    

git commit –m "Redo."
    
git log
    
git status
    
git reset --hard "HEAD^"
    
git log
    
git status



1.  What does `git reset --hard ``"HEAD^"`` `do?

   

It sent up back one commit and got rid of any changes since that commit.



2.  What is the difference between `--hard` and `--soft`?

    

Soft keeps changes to be commited and hard gets rid of chnages to be commited.



3.  What do you think `HEAD` means?

    

It is a reference to the current commit.



4.  What do you think `HEAD^` means?

    

It is not a reference to the current commit, but is the actual current commit.



5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), 
and 2) submit this document.



6. Push this document, completed, to your repo.



J. Helpful resources

--------------------

-   

<https://git-scm.com/doc>


-   <https://www.atlassian.com/git/tutorials/>


-   github-git-cheat-sheet.pdf on class website



K. Copyright and Licensing

--------------------------



Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work 
is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. 
To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
